# AnimaLineage - Application de Gestion d'Élevage

## Vue d'ensemble
Application web full-stack moderne pour la gestion professionnelle d'élevages avec interface React/TypeScript et API PHP robuste.

## Architecture
```
AnimaLineage/
├── frontend/           # Application React TypeScript (port 3002)
│   ├── src/
│   │   ├── components/ # Composants React modulaires
│   │   │   ├── Auth.tsx              # Authentification
│   │   │   ├── MainDashboard.tsx     # Tableau de bord principal
│   │   │   ├── AdminPanel.tsx        # Interface d'administration
│   │   │   ├── ElevageForm.tsx       # Gestion des élevages
│   │   │   ├── AnimalForm.tsx        # Gestion des animaux (🦕)
│   │   │   ├── AnimalList.tsx        # Liste des animaux (🦕)
│   │   │   ├── RaceForm.tsx          # Gestion des races
│   │   │   ├── TypeAnimalForm.tsx    # Types d'animaux (🦕)
│   │   │   ├── TransferRequestManager.tsx # Gestion demandes transfert
│   │   │   ├── LanguageSelector.tsx  # Sélecteur de langue (i18n)
│   │   │   ├── ElevageUsersManagement.tsx # Gestion utilisateurs élevage
│   │   │   └── CompatibilityTester.tsx    # Testeur compatibilité reproduction
│   │   ├── contexts/   # Gestion d'état global
│   │   │   └── AuthContext.tsx       # Contexte d'authentification
│   │   ├── i18n/       # Internationalisation
│   │   ├── store/      # Store Redux
│   │   ├── hooks/      # Hooks personnalisés
│   │   └── utils/      # Fonctions utilitaires
│   │       ├── auth.ts               # Utilitaires d'authentification
│   │       ├── errorHandler.ts       # Gestion d'erreurs
│   │       └── errorCodes.ts         # Codes d'erreur
│   ├── package.json    # Dépendances Node.js
│   └── build/          # Build de production
├── backend/            # API REST PHP (port 3001)
│   ├── controllers/    # Contrôleurs MVC
│   │   ├── UserController.php        # Gestion utilisateurs
│   │   ├── AuthController.php        # Authentification
│   │   ├── AdminController.php       # Administration
│   │   ├── SimpleAdminController.php # Administration simplifiée
│   │   ├── ElevageController.php     # Gestion élevages
│   │   ├── AnimalController.php      # Gestion animaux
│   │   └── TransferRequestController.php # Demandes de transfert
│   ├── models/         # Modèles de données
│   │   ├── User.php                  # Modèle utilisateur
│   │   ├── Animal.php                # Modèle animal
│   │   ├── Elevage.php               # Modèle élevage
│   │   ├── Race.php                  # Modèle race
│   │   ├── TypeAnimal.php            # Modèle type animal
│   │   └── TransferRequest.php       # Modèle demande de transfert
│   ├── config/         # Configuration système
│   │   ├── database.php              # Configuration BDD
│   │   └── env.php                   # Variables d'environnement
│   ├── migrations/     # Migrations de schéma
│   ├── middleware/     # Middleware sécurité
│   │   └── AuthMiddleware.php        # Authentification JWT
│   ├── database/       # Base de données SQLite
│   └── index.php       # Point d'entrée et routeur API
├── docs/               # Documentation projet
│   ├── ARCHITECTURE.md               # Architecture système
│   └── CONVENTIONS.md                # Conventions de code
├── scripts/            # Scripts utilitaires
└── .nvmrc              # Version Node.js recommandée
```

## Sécurité
La sécurité est la priorité de tout développement.
Les actions transmises par le frontend doivent être vérifiées par le backend pour se prémunir d'une tentative de piratage et/ou de corruption de données et/ou d'escalade de droits.

## Stack Technique

### Frontend (React/TypeScript)
- **React 19.1.1** avec TypeScript 4.9.5
- **React Testing Library** pour les tests unitaires
- **Tailwind CSS v3.4.0** avec PostCSS pour le styling modulaire
- **Context API** pour la gestion d'état global
- **Fetch API** pour les appels HTTP
- **ESLint & Prettier** pour la qualité du code
- **Redux toolkit** pour gérer les états avec React de manière standardisée
- **react-i18next** pour l'internationalisation
- **PostCSS** avec Autoprefixer pour la gestion des styles CSS

### Backend (PHP)
- **PHP 7.4+** avec architecture MVC orientée objet
- **PDO** pour l'abstraction base de données
- **JWT (firebase/php-jwt)** pour l'authentification stateless
- **Architecture REST** pour l'API
- **Support multi-SGBD** (SQLite/MySQL/PostgreSQL)
- **Migrations automatiques** pour le schéma de données

## Modèles de Données

### Entités principales
- **User** : Utilisateurs avec système de validation par statut
  - Statuts : `0` (en attente), `1` (validé), `2` (rejeté)
  - Rôles : administrateur, éleveur, consultant
  - Authentification JWT sécurisée

- **Elevage** : Structures d'élevage
  - Informations complètes (nom, adresse, contact)
  - Liaison avec utilisateurs propriétaires
  - Gestion multi-élevage par utilisateur

- **Animal** : Animaux individuels
  - Données complètes (identification, généalogie)
  - Liaison avec élevage et race
  - Historique et suivi sanitaire

- **Race** : Races d'animaux
  - Classification par type d'animal
  - Caractéristiques spécifiques

- **TypeAnimal** : Types d'animaux
  - Catégories principales (bovins, ovins, etc.)
  - Structuration hiérarchique

## Fonctionnalités Principales

### Authentification & Autorisation
- **Système JWT** avec tokens sécurisés
- **Middleware d'authentification** sur toutes les routes protégées
- **Gestion des rôles** avec contrôle d'accès granulaire
- **Comptes en attente** avec système de validation administrateur

### Gestion d'Élevage
- **CRUD complet** pour élevages, animaux, races et types
- **Interface intuitive** avec formulaires validés (🦕 émojis cohérents)
- **Recherche et filtrage** avancés
- **Tableau de bord** avec vue d'ensemble
- **Gestion des demandes de transfert** d'animaux entre élevages
- **Sélection intelligente des parents** (même espèce uniquement)
- **Filtrage automatique** des utilisateurs validés uniquement
- **Filtrage correct par élevage** (correction v2.1.1 - admins voient uniquement les animaux de l'élevage consulté)
- **Gestion des utilisateurs d'élevage** : Système complet d'ajout/suppression avec permissions
- **Testeur de compatibilité** : Module avancé d'analyse de reproduction avec scoring génétique

### Administration
- **Panel d'administration** pour la gestion des utilisateurs
- **Validation des comptes** en attente
- **Gestion des permissions** et rôles
- **Monitoring** des activités
- **Contrôles d'accès granulaires** :
  - Types & Races : Admin uniquement (rôle 1)
  - Animaux & Transferts : Admin et Modérateurs (rôle ≤ 2)
  - Élevages : Tous les utilisateurs validés
  - Compatibilité Reproduction : Tous les utilisateurs validés (sans contrainte d'élevage)
  - Gestion utilisateurs élevage : Admin (tous élevages) et Modérateurs (leurs élevages)

### Sécurité & Performance
- **Validation côté client et serveur**
- **Échappement des données** avec requêtes préparées
- **Interface responsive** pour tous les appareils
- **Gestion d'erreurs** robuste

## Configuration

### Développement
- Backend: `php -S 0.0.0.0:3001 index.php` dans /backend (important: 0.0.0.0 pour éviter les erreurs de connexion)
- Frontend: `npm start` dans /frontend (démarre sur port 3002)
- Base de données: SQLite automatique (backend/database.sqlite)
- Logo: Intégré dans MainDashboard (/logo_full.svg)

### Production
- Variables d'environnement dans backend/.env
- Support MySQL/PostgreSQL
- Build frontend avec `npm run build`

## Scripts disponibles
- Frontend: start, build, test, eject
- Backend: migrate.php pour les migrations

## Sécurité
- Authentification JWT
- Validation des entrées
- CORS configuré
- Middleware d'autorisation

## Récentes Améliorations (2025-10-01)

### Nouvelles fonctionnalités
- ✅ **Validation des dates** : Ajout de validation et limites dans les formulaires d'animaux
- ✅ **Statistiques d'élevage** : Nouveau module de statistiques avec pyramide des âges dans ElevageDetail
- ✅ **Colonnes triables** : Table des animaux avec tri par colonnes dans ElevageDetail
- ✅ **Support contexte élevage** : Intégration du contexte d'élevage dans AnimalForm

### Améliorations CI/CD
- ✅ **Workflow simplifié** : Tests focalisés sur les bases essentielles
- ✅ **Tests backend PHP** : Ajout des tests PHP avec structure améliorée
- ✅ **Matrice Node.js** : Support Node.js 18 dans la CI
- ✅ **Nettoyage CI** : Suppression uploads Codecov et optimisation workflow

## Améliorations Précédentes (2025-09-22)

### Interface Utilisateur
- ✅ **Migration vers Tailwind CSS** : Refactoring complet des styles des composants animaux
- ✅ **Logo intégré** : Remplacement du titre h1 par le logo SVG dans MainDashboard
- ✅ **Harmonisation du thème sombre** : Uniformisation des couleurs (#282c34, #374151, #1f2937)
- ✅ **Formulaires améliorés** : Sélection propriétaire fonctionnelle dans ElevageForm
- ✅ **Amélioration des boutons** : Renommage des boutons dans l'onglet élevages pour plus de clarté
  - "Action" → "Configuration" pour l'édition d'élevage
  - "Animaux" → "Édition" pour la gestion des animaux et utilisateurs
- ✅ **Harmonisation visuelle** : Styles des boutons alignés avec l'onglet "Types & Races"
- ✅ **Optimisation CSS** : Suppression des redondances avec Tailwind CSS et PostCSS
- ✅ **Émojis cohérents** : Ajout de l'émoji 🦕 dans toutes les interfaces liées aux animaux

### Sécurité & Accès
- ✅ **Restriction Types & Races** : Accès Admin uniquement (frontend + backend)
- ✅ **Filtrage utilisateurs validés** : Seuls les utilisateurs status=1 disponibles dans les formulaires
- ✅ **Correction authentification** : Migration localStorage → sessionStorage pour cohérence
- ✅ **Validation parentale** : Sélection parents limitée à la même espèce (type d'animal)

### Fonctionnalités Métier
- ✅ **Gestion demandes de transfert** : Nouveau système complet (TransferRequestController)
- ✅ **Sélection intelligente parents** : Filtre automatique par type d'animal (Ovin, Bovin, etc.)
- ✅ **Gestion multi-langues** : Infrastructure i18n avec LanguageSelector
- ✅ **Store Redux** : Architecture d'état centralisée mise en place
- ✅ **Gestion utilisateurs élevage** : Ajout/suppression d'utilisateurs avec contrôles de permissions
- ✅ **Testeur de compatibilité** : Nouveau module de test de compatibilité de reproduction
  - Analyse de la diversité génétique avec scoring intelligent
  - Détection automatique de consanguinité (parent-enfant, frères/sœurs)
  - Vérification de compatibilité d'espèce et de sexe
  - Accessible à tous les utilisateurs sans contrainte d'élevage

### Corrections Techniques
- ✅ **UserController** : Correction accès propriété database privée
- ✅ **Boucles infinies** : Optimisation dépendances useCallback dans AnimalForm
- ✅ **Serveur PHP** : Configuration 0.0.0.0:3001 pour éviter erreurs connexion
- ✅ **Tests unitaires** : Infrastructure de tests complète (React Testing Library)
- ✅ **Filtrage animaux** : Correction du filtrage par élevage pour les administrateurs
- ✅ **Scoring consanguinité** : Correction du calcul de diversité génétique pour les animaux apparentés
- ✅ **Affichage espèces** : Correction de "undefined" dans l'affichage des espèces

## État Actuel du Projet

### Statut de Développement
- ✅ **Application fonctionnelle** en production
- ✅ **Backend sécurisé** sans vulnérabilités connues
- ✅ **Documentation complète** et à jour
- ⚠️ **Dépendances frontend** : vulnérabilités mineures identifiées

### Architecture Validée
- ✅ **Séparation frontend/backend** claire
- ✅ **API REST** complète et documentée
- ✅ **Base de données** multi-environnement
- ✅ **Authentification JWT** robuste
- ✅ **Interface responsive** validée

## Points d'Attention

### Sécurité
- 🔒 **Authentification** : JWT avec middleware obligatoire
- 🔒 **Validation** : côté client ET serveur
- 🔒 **Base de données** : requêtes préparées exclusivement
- 🔒 **CORS** : configuration stricte

### Maintenance
- 📋 **Dépendances** : audit régulier recommandé (voir dependency-audit-2025-09-19.md)
- 📋 **Configuration** : variables d'environnement via fichiers .env
- 📋 **Migrations** : automatiques au démarrage
- 📋 **Documentation** : maintien à jour obligatoire
- 📋 **Versioning** : commit après chaque modification significative

### Performance
- ⚡ **Frontend** : optimisation React (memoization, lazy loading)
- ⚡ **Backend** : requêtes SQL optimisées
- ⚡ **Base de données** : index appropriés

