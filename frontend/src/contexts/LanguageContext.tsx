import React, { createContext, useContext, useState, useEffect } from 'react';

interface LanguageConfig {
  defaultLang: string;
  selectorEnabled: boolean;
}

interface LanguageContextType {
  currentLang: string;
  setLanguage: (lang: string) => void;
  config: LanguageConfig;
  t: (key: string) => string;
}

interface LanguageProviderProps {
  children: React.ReactNode;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// Traductions pour le composant CompatibilityTester
const translations = {
  fr: {
    // Titre et description
    'compatibility.title': 'üß¨ Test de Compatibilit√© de Reproduction',
    'compatibility.description': 'Analysez la compatibilit√© reproductive entre deux animaux ü¶ï et √©valuez le brassage g√©n√©tique potentiel',

    // S√©lection des animaux
    'animal.select1': 'ü¶ï Animal 1',
    'animal.select2': 'ü¶ï Animal 2',
    'animal.search.placeholder': 'Rechercher par nom ou identifiant...',
    'animal.selected': 'S√©lectionn√©:',
    'animal.noname': 'Sans nom',
    'animal.male': '‚ôÇÔ∏è M√¢le',
    'animal.female': '‚ôÄÔ∏è Femelle',
    'animal.type.undefined': 'Type non d√©fini',

    // Boutons
    'button.analyze': 'üß¨ Analyser la Compatibilit√©',
    'button.reset': 'üîÑ Recommencer',

    // Messages d'erreur
    'error.loading': 'Erreur lors du chargement des animaux.',
    'error.connection': 'Erreur de connexion lors du chargement.',
    'loading.animals': 'Chargement des animaux ü¶ï...',

    // R√©sultats de compatibilit√©
    'result.compatible': '‚úÖ Reproduction Compatible',
    'result.incompatible': '‚ùå Reproduction Non Recommand√©e',
    'result.select.both': 'Veuillez s√©lectionner deux animaux',

    // V√©rifications
    'check.species.different': 'Esp√®ces diff√©rentes',
    'check.species.undefined': 'Type d\'animal non d√©fini pour les deux animaux',
    'check.species.same': 'M√™me esp√®ce',
    'check.sex.same.male': 'M√™me sexe: M√¢les',
    'check.sex.same.female': 'M√™me sexe: Femelles',
    'check.sex.compatible': 'Sexes compl√©mentaires',
    'check.relationship.detected': 'Consanguinit√© d√©tect√©e',
    'check.relationship.none': 'Pas de consanguinit√© directe d√©tect√©e',

    // Relations familiales
    'relationship.same': 'M√™me individu',
    'relationship.parent': 'Parent-enfant',
    'relationship.sibling': 'Fr√®re/S≈ìur',

    // Analyse g√©n√©tique
    'genetic.title': 'üß¨ Analyse du Brassage G√©n√©tique',
    'genetic.consanguinity': 'Consanguinit√© directe - diversit√© g√©n√©tique tr√®s faible',
    'genetic.same.race': 'M√™me race - diversit√© mod√©r√©e',
    'genetic.different.race': 'Races diff√©rentes - excellente diversit√©',
    'genetic.excellent': 'Excellente diversit√© g√©n√©tique',
    'genetic.moderate': 'Diversit√© mod√©r√©e',
    'genetic.low': 'Diversit√© faible - risque g√©n√©tique √©lev√©',
    'genetic.score': 'Score',

    // Recommandations
    'recommendations.title': 'üí° Recommandations:',
    'recommendations.avoid': '√âviter absolument ce croisement',
    'recommendations.unrelated': 'Rechercher des reproducteurs non apparent√©s',
    'recommendations.crossbreed': 'Consid√©rer un croisement avec une race diff√©rente pour diversit√© maximale',
    'recommendations.optimal': 'Croisement inter-races favorisant la diversit√© g√©n√©tique optimale',

    // Descendance
    'offspring.title': 'üß¨ Descendance Potentielle',
    'offspring.traits': 'Traits Attendus:',
    'offspring.risks': 'Facteurs de Risque:',
    'offspring.traits.typical': 'Traits typiques de la race',
    'offspring.traits.homogeneous': 'Expression homog√®ne des caract√©ristiques raciales',
    'offspring.traits.mix': 'M√©lange des traits',
    'offspring.traits.hybrid': 'Possible vigueur hybride (h√©t√©rosis)',
    'offspring.traits.new': 'Combinaisons nouvelles de caract√®res',
    'offspring.risks.malformations': 'üö® Risque majeur de malformations cong√©nitales',
    'offspring.risks.genetic': 'üö® Forte probabilit√© de maladies g√©n√©tiques r√©cessives',
    'offspring.risks.vitality': 'üö® R√©duction significative de la vitalit√©',
    'offspring.risks.fertility': 'üö® Probl√®mes de fertilit√© chez la descendance',
    'offspring.risks.breed': 'Risque accru de maladies g√©n√©tiques li√©es √† la race',
    'offspring.risks.vigor': 'Possible r√©duction de la vigueur hybride',
    'offspring.risks.minimal': 'Risques g√©n√©tiques minimaux'
  },
  en: {
    // Titre et description
    'compatibility.title': 'üß¨ Breeding Compatibility Test',
    'compatibility.description': 'Analyze reproductive compatibility between two animals ü¶ï and evaluate genetic diversity potential',

    // S√©lection des animaux
    'animal.select1': 'ü¶ï Animal 1',
    'animal.select2': 'ü¶ï Animal 2',
    'animal.search.placeholder': 'Search by name or identifier...',
    'animal.selected': 'Selected:',
    'animal.noname': 'No name',
    'animal.male': '‚ôÇÔ∏è Male',
    'animal.female': '‚ôÄÔ∏è Female',
    'animal.type.undefined': 'Undefined type',

    // Boutons
    'button.analyze': 'üß¨ Analyze Compatibility',
    'button.reset': 'üîÑ Reset',

    // Messages d'erreur
    'error.loading': 'Error loading animals.',
    'error.connection': 'Connection error during loading.',
    'loading.animals': 'Loading animals ü¶ï...',

    // R√©sultats de compatibilit√©
    'result.compatible': '‚úÖ Compatible Breeding',
    'result.incompatible': '‚ùå Breeding Not Recommended',
    'result.select.both': 'Please select two animals',

    // V√©rifications
    'check.species.different': 'Different species',
    'check.species.undefined': 'Animal type undefined for both animals',
    'check.species.same': 'Same species',
    'check.sex.same.male': 'Same sex: Males',
    'check.sex.same.female': 'Same sex: Females',
    'check.sex.compatible': 'Compatible sexes',
    'check.relationship.detected': 'Inbreeding detected',
    'check.relationship.none': 'No direct inbreeding detected',

    // Relations familiales
    'relationship.same': 'Same individual',
    'relationship.parent': 'Parent-offspring',
    'relationship.sibling': 'Sibling',

    // Analyse g√©n√©tique
    'genetic.title': 'üß¨ Genetic Diversity Analysis',
    'genetic.consanguinity': 'Direct inbreeding - very low genetic diversity',
    'genetic.same.race': 'Same breed - moderate diversity',
    'genetic.different.race': 'Different breeds - excellent diversity',
    'genetic.excellent': 'Excellent genetic diversity',
    'genetic.moderate': 'Moderate diversity',
    'genetic.low': 'Low diversity - high genetic risk',
    'genetic.score': 'Score',

    // Recommandations
    'recommendations.title': 'üí° Recommendations:',
    'recommendations.avoid': 'Absolutely avoid this breeding',
    'recommendations.unrelated': 'Search for unrelated breeding animals',
    'recommendations.crossbreed': 'Consider crossbreeding with different breed for maximum diversity',
    'recommendations.optimal': 'Inter-breed crossing promoting optimal genetic diversity',

    // Descendance
    'offspring.title': 'üß¨ Potential Offspring',
    'offspring.traits': 'Expected Traits:',
    'offspring.risks': 'Risk Factors:',
    'offspring.traits.typical': 'Typical breed traits',
    'offspring.traits.homogeneous': 'Homogeneous expression of breed characteristics',
    'offspring.traits.mix': 'Mix of traits',
    'offspring.traits.hybrid': 'Possible hybrid vigor (heterosis)',
    'offspring.traits.new': 'New character combinations',
    'offspring.risks.malformations': 'üö® Major risk of congenital malformations',
    'offspring.risks.genetic': 'üö® High probability of recessive genetic diseases',
    'offspring.risks.vitality': 'üö® Significant reduction in vitality',
    'offspring.risks.fertility': 'üö® Fertility problems in offspring',
    'offspring.risks.breed': 'Increased risk of breed-related genetic diseases',
    'offspring.risks.vigor': 'Possible reduction in hybrid vigor',
    'offspring.risks.minimal': 'Minimal genetic risks'
  }
};

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  // Configuration par d√©faut (peut √™tre r√©cup√©r√©e depuis l'API ou les variables d'environnement)
  const [config] = useState<LanguageConfig>({
    defaultLang: 'fr', // LANG_DEFAULT=fr
    selectorEnabled: false // LANG_SELECTOR=false
  });

  const [currentLang, setCurrentLang] = useState<string>(config.defaultLang);

  useEffect(() => {
    if (config.selectorEnabled) {
      // Si le s√©lecteur est activ√©, r√©cup√©rer la langue sauvegard√©e ou utiliser la langue par d√©faut
      const savedLang = localStorage.getItem('selectedLanguage');
      if (savedLang && translations[savedLang as keyof typeof translations]) {
        setCurrentLang(savedLang);
      } else {
        setCurrentLang(config.defaultLang);
      }
    } else {
      // Si le s√©lecteur est d√©sactiv√©, utiliser uniquement la langue par d√©faut
      setCurrentLang(config.defaultLang);
    }
  }, [config.defaultLang, config.selectorEnabled]);

  const setLanguage = (lang: string) => {
    // Ne permettre le changement de langue que si le s√©lecteur est activ√©
    if (config.selectorEnabled && translations[lang as keyof typeof translations]) {
      setCurrentLang(lang);
      localStorage.setItem('selectedLanguage', lang);
    }
  };

  const t = (key: string): string => {
    const langTranslations = translations[currentLang as keyof typeof translations];
    return langTranslations?.[key as keyof typeof langTranslations] || key;
  };

  return (
    <LanguageContext.Provider value={{ currentLang, setLanguage, config, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};