name: 🧪 Tests Complets AnimaLineage

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Tests automatiques tous les jours à 3h du matin
    - cron: '0 3 * * *'

jobs:
  # Tests unitaires PHP (Backend)
  php-tests:
    name: 🐘 Tests PHP Backend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [8.4]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: pdo, pdo_sqlite, mbstring, json, pcov
          tools: composer
          coverage: pcov

      - name: Install dependencies
        run: |
          cd backend
          composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Debug backend structure
        run: |
          cd backend
          ls -la
          pwd
          which php
          php --version
          composer --version

      - name: Run PHPUnit tests
        run: |
          cd backend
          ./vendor/bin/phpunit --configuration phpunit.xml --coverage-text --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: php-coverage

  # Tests unitaires React (Frontend)
  react-tests:
    name: ⚛️ Tests React Frontend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Debug frontend structure
        run: |
          cd frontend
          ls -la
          pwd
          node --version
          npm --version
          cat package.json | head -20

      - name: Run Jest tests
        run: |
          cd frontend
          npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: react-coverage

  # Tests de sécurité
  security-tests:
    name: 🔒 Tests de Sécurité
    runs-on: ubuntu-latest
    needs: [php-tests, react-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm run test:audit

      - name: Setup PHP for backend security
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer

      - name: Install PHP dependencies
        run: |
          cd backend
          composer install --no-dev --optimize-autoloader

      - name: Run backend security checks
        run: |
          cd backend
          composer show --latest --direct || echo "Security check completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            frontend/reports/
            backend/reports/

  # Tests End-to-End avec Cypress
  e2e-tests:
    name: 🔄 Tests End-to-End
    runs-on: ubuntu-latest
    needs: [security-tests]

    strategy:
      matrix:
        browser: [chrome, firefox]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: pdo, pdo_sqlite
          tools: composer

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          composer install --optimize-autoloader

      - name: Setup test database
        run: |
          cd backend
          touch database/test.sqlite
          php migrate.php

      - name: Start backend server
        run: |
          cd backend
          php -S localhost:3001 index.php &
          sleep 5

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          start: npm start
          wait-on: 'http://localhost:3000, http://localhost:3001'
          wait-on-timeout: 120
          browser: ${{ matrix.browser }}
          spec: |
            cypress/e2e/authentication.cy.ts
            cypress/e2e/elevage-management.cy.ts
            cypress/e2e/security.cy.ts
            cypress/e2e/accessibility.cy.ts

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}
          path: frontend/cypress/screenshots

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.browser }}
          path: frontend/cypress/videos

  # Tests de Performance et Accessibilité
  performance-tests:
    name: ⚡ Tests de Performance
    runs-on: ubuntu-latest
    needs: [e2e-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: pdo, pdo_sqlite
          tools: composer

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && composer install --optimize-autoloader

      - name: Setup test environment
        run: |
          cd backend
          touch database/test.sqlite
          php migrate.php

      - name: Start servers
        run: |
          cd backend && php -S localhost:3001 index.php &
          cd frontend && npm start &
          sleep 30

      - name: Run Lighthouse performance tests
        run: |
          cd frontend
          npm run test:performance

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: frontend/reports/

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const summaryPath = 'frontend/reports/performance-summary.json';
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));

                let comment = '## 📊 Rapport de Performance\n\n';
                summary.results.forEach(result => {
                  comment += `### ${result.url}\n`;
                  comment += `- ⚡ Performance: ${result.performance}%\n`;
                  comment += `- ♿ Accessibilité: ${result.accessibility}%\n`;
                  comment += `- ✅ Bonnes pratiques: ${result['best-practices']}%\n`;
                  comment += `- 🔍 SEO: ${result.seo}%\n\n`;
                });

                if (summary.passed) {
                  comment += '🎉 Tous les seuils de performance sont respectés!';
                } else {
                  comment += '⚠️ Certains seuils de performance ne sont pas respectés.';
                }

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not post performance comment:', error);
            }

  # Génération du rapport final
  final-report:
    name: 📋 Rapport Final
    runs-on: ubuntu-latest
    needs: [php-tests, react-tests, security-tests, e2e-tests, performance-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive report
        run: |
          echo "# 🦕 Rapport de Tests animaLignage" > test-report.md
          echo "Date: $(date)" >> test-report.md
          echo "" >> test-report.md

          echo "## 📊 Résumé des Tests" >> test-report.md
          echo "- PHP Tests: ${{ needs.php-tests.result }}" >> test-report.md
          echo "- React Tests: ${{ needs.react-tests.result }}" >> test-report.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
          echo "" >> test-report.md

          if [[ "${{ needs.php-tests.result }}" == "success" &&
                "${{ needs.react-tests.result }}" == "success" &&
                "${{ needs.security-tests.result }}" == "success" &&
                "${{ needs.e2e-tests.result }}" == "success" &&
                "${{ needs.performance-tests.result }}" == "success" ]]; then
            echo "## ✅ Statut Global: SUCCÈS" >> test-report.md
            echo "Tous les tests sont passés avec succès!" >> test-report.md
          else
            echo "## ❌ Statut Global: ÉCHEC" >> test-report.md
            echo "Certains tests ont échoué. Consultez les détails ci-dessus." >> test-report.md
          fi

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: test-report.md

      - name: Comment final status on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
